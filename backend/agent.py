import os
import re
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import AIMessage, HumanMessage
from datetime import datetime
import pytz

# --- 1. Importar as ferramentas da nova estrutura modular ---
from .tools.data_retrieval_tools import (
    get_stock_data,
    get_volatility_cone,
    get_market_summary,
    get_top_stocks_by_criteria,
    get_current_datetime,
    list_available_tickers
)
from .tools.analysis_tools import (
    get_asset_analytics,
    compare_assets
)
from .tools.notification_tools import (
    notify_developer_of_missing_tool
)

# --- 2. Montagem do Agente ---
def create_agent_executor():
    """
    Cria e configura o agente LangChain com o novo c√©rebro anal√≠tico
    e todas as ferramentas dispon√≠veis.
    """
    print("üß† Inicializando o agente com capacidades anal√≠ticas avan√ßadas...")
    
    # Agrega todas as ferramentas importadas em uma √∫nica lista
    all_tools = [
        get_stock_data,
        get_volatility_cone,
        get_market_summary,
        get_top_stocks_by_criteria,
        get_current_datetime,
        list_available_tickers,
        get_asset_analytics,
        compare_assets,
        notify_developer_of_missing_tool
    ]
    
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    
    # Injeta a data/hora atual para consci√™ncia temporal
    sao_paulo_tz = pytz.timezone("America/Sao_Paulo")
    now_sp = datetime.now(sao_paulo_tz)
    dias_semana = {
        'Monday': 'Segunda-feira', 'Tuesday': 'Ter√ßa-feira', 'Wednesday': 'Quarta-feira',
        'Thursday': 'Quinta-feira', 'Friday': 'Sexta-feira', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'
    }
    dia_semana_en = now_sp.strftime('%A')
    dia_semana_pt = dias_semana[dia_semana_en]
    current_time_str = f"{now_sp.strftime('%Y-%m-%d %H:%M:%S')} ({dia_semana_pt})"
    
    # --- O Novo C√©rebro do Agente (System Prompt) ---
    system_prompt = f"""Voc√™ √© um assistente S√™nior de an√°lise de dados da B3. Seu objetivo √© decompor perguntas complexas, usar suas ferramentas em sequ√™ncia e sintetizar os resultados para gerar insights.

# Persona e Escopo:
- Sua identidade: Analista de dados S√™nior.
- Seu conhecimento √© estritamente baseado nos dados retornados por suas ferramentas.
- A data e hora atuais s√£o: {current_time_str}. Use essa informa√ß√£o como refer√™ncia para datas relativas.

# Diretriz de Efici√™ncia:
- **N√ÉO FA√áA CHAMADAS DUPLICADAS.** Antes de usar uma ferramenta, verifique seu hist√≥rico e o resultado da chamada anterior. Se voc√™ j√° tem a informa√ß√£o, use-a. N√£o chame a mesma ferramenta com os mesmos par√¢metros duas vezes.

# Racioc√≠nio e Plano de A√ß√£o (Chain of Thought):
1.  **Decomponha a Pergunta:** Ao receber uma consulta do usu√°rio, primeiro entenda o objetivo final. Se a pergunta for complexa (ex: "Compare X e Y", "X est√° sobrecomprado?"), crie um plano mental de quais ferramentas usar em sequ√™ncia.
2.  **Execute o Plano com Efici√™ncia:** Chame as ferramentas necess√°rias, UMA √öNICA VEZ, para coletar todos os dados.
3.  **Sintetize o Insight:** N√£o apenas retorne os dados brutos das ferramentas. Combine os resultados para formular uma conclus√£o coesa e bem fundamentada. Responda √† pergunta original do usu√°rio com um resumo anal√≠tico.

# Exemplo de Racioc√≠nio Eficiente:
- **Pergunta do Usu√°rio:** "A PETR4.SA parece sobrecomprada em compara√ß√£o com sua m√©dia m√≥vel?"
- **Seu Plano Mental:**
    1. "Preciso de indicadores t√©cnicos (RSI e M√©dia M√≥vel) da PETR4.SA. A ferramenta `get_asset_analytics` fornece AMBOS em uma √∫nica chamada."
    2. "Vou chamar `get_asset_analytics` UMA VEZ para obter todos os dados necess√°rios."
    3. "Com o resultado, vou analisar o valor do RSI e comparar o pre√ßo com a m√©dia m√≥vel para dar uma resposta completa e fundamentada."

# Diretriz de Escalada (Feedback Loop):
- Se, durante o planejamento, voc√™ concluir que NENHUMA combina√ß√£o de suas ferramentas atuais pode responder √† pergunta, use a ferramenta `notify_developer_of_missing_tool`.
- Informe ao usu√°rio que a an√°lise solicitada ainda n√£o √© poss√≠vel, mas que o time de desenvolvimento foi notificado para criar essa nova capacidade.

# Limites:
- Voc√™ continua N√ÉO PODENDO prever o futuro ou dar conselhos de investimento. Sua an√°lise √© estritamente quantitativa e baseada em dados hist√≥ricos.
- Se o usu√°rio pedir uma opini√£o ou previs√£o, recuse educadamente e sugira uma pergunta baseada em dados que voc√™ PODE responder.
"""

    prompt = ChatPromptTemplate.from_messages([
        ("system", system_prompt),
        MessagesPlaceholder(variable_name="chat_history"),
        ("user", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ])
    
    agent = create_openai_tools_agent(llm, all_tools, prompt)
    
    agent_executor = AgentExecutor(
        agent=agent, 
        tools=all_tools, 
        verbose=True,
    )
    
    print("‚úÖ Agente S√™nior pronto para uso.")
    return agent_executor

# --- 3. Fun√ß√£o Principal de Consulta com Gerenciamento de Hist√≥rico ---
agent_executor = create_agent_executor()
chat_history_per_session = {}

def query_agent(question: str, session_id: str = "default_user"):
    """
    Executa uma consulta contra o agente, mantendo um hist√≥rico da conversa.
    """
    print(f"‚ùì Nova pergunta para o agente (Sess√£o: {session_id}): {question}")
    
    chat_history = chat_history_per_session.get(session_id, [])

    response = agent_executor.invoke({
        "input": question,
        "chat_history": chat_history
    })
    
    chat_history.extend([
        HumanMessage(content=question),
        AIMessage(content=response['output']),
    ])
    chat_history_per_session[session_id] = chat_history

    # Retorna a resposta final, que pode ser um texto ou um JSON para gr√°ficos
    return response['output']
